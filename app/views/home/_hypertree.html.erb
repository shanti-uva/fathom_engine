<script>
  $(document).ready(function() {
	//init();
	//alert('Cargando Pagina');
	var TARGET_JSON_URL = '<%= @json_start_url %>';
	//alert(TARGET_JSON_URL);
	
	//$("#json_test").load("hypertree_test.json");
	//jQuery.getJSON(url  : "hypertree_test.json")
	//.done(function( data ) {init(data);});
	if (TARGET_JSON_URL == ''){TARGET_JSON_URL = 'projects/385.json'} 
	//alert(TARGET_JSON_URL);
	//$.getJSON('hypertree_test.json', function(data) {
	//$.getJSON('projects/385.json', function(data) {
	$.getJSON(TARGET_JSON_URL, function(data) {
	
	    // do something with the data here
	    init(data);
	
		
	});

		
	//alert('Fin Pagina');
  });

</script>

<script>
var labelType, useGradients, nativeTextSupport, animate;

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport 
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem) 
      this.elem = document.getElementById('log');
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};


function init(somejson){
    //init data
	var json = somejson
    //end
    var infovis = document.getElementById('infovis');
    //var w = infovis.offsetWidth - 50, h = infovis.offsetHeight - 50;
    var w = infovis.offsetWidth, h = infovis.offsetHeight;
	

    //init Hypertree
    var ht = new $jit.Hypertree({
      //id of the visualization container
      injectInto: 'infovis',
      //canvas width and height
      width: w,
      height: h,
      //Change node and edge styles such as
      //color, width and dimensions.
      Node: {
	      overridable: true,
          //dim: 15,
		  dim: 102,
          color: "#415C7E"
      },
      Edge: {
          lineWidth: 3,
		  type: 'line',
          color: "#A4A4A4"
      },
	  Tips: {  
	    enable: false,  
	    type: 'Native',  
	    offsetX: 10,  
	    offsetY: 10,  
	    onShow: function(tip, node) {  
	      tip.innerHTML = node.name;  
	    }  
	  },
	  Events: {  
	    enable: true,  
	    onClick: function(node, eventInfo, e) {  
	     
			//alert(node.name); 
			//alert(node.data.controller);
			//json_url = '' + node.data.relation + '/' + node.id + '.json';
			var target_id = '';
			var toRemove = '';
			if (node.data.controller == "projects" ) { toRemove='p_'; target_id = node.id.replace(toRemove,'');}
			if (node.data.controller == "organizations" ) { toRemove='o_'; target_id = node.id.replace(toRemove,'');}
			if (node.data.controller == "people" ) { target_id = node.id;}
			//json_url = '' + node.data.controller + '/' + node.id + '.json';
			//alert(target_id);
			json_url = '' + node.data.controller +  '/' + target_id+ '.json';
			//alert(json_url);
			//$.getJSON('people/384.json', function(data) {
			
			var target_node = node.id
			
			//ht.op.removeEdge([['p_385', "446"]], {  
			//        type: 'replot',
			//        duration: 1500 
			//    });
			
			
			
	        	//ht.op.removeNode('4', {  
				//  type: 'replot',  
				//  duration: 1000,  
				//  hideLabels: false,  
				//  transition: $jit.Trans.Quart.easeOut  
				//});
				
			//ht.op.removeNode(['392','400'], {  
			// type: 'replot',  
			//  duration: 1500  
			//});
			
			//ht.op.removeNode(['p_385'], {  
			// type: 'replot',  
			//  duration: 1500  
			//});
			
			//var n = ht.graph.getNode('p_385');
		    //if(!n) return;
		    //var subnodes = n.getSubnodes(0);	
			//for (var i = 0; i < subnodes.length; i++) {
	        //    alert(subnodes[i].id);
	        //}
			
			//ht.graph.each(function(node_to_delete) {  
			//	if (node_to_delete.id  == target_node){}
			//	else {
			//		//alert(node_to_delete.id); 
			//		ht.op.removeNode([node_to_delete.id], {  
			//		  type: 'replot',  
			//		  duration: 1500  
			//		});
			//	}
			//	});
			
			
			
			$.getJSON(json_url, function(data) {
		    	
				ht.loadJSON(data);
			    ////compute positions and plot.
			    ht.refresh();
				ht.controller.onComplete();
				
				//ht.op.sum(data, {  
				//  type: 'fade:con',  
				//  duration: 1500  
				//});
			}); 
	    } 
	  },
      onBeforeCompute: function(node){
		//alert('onBeforeCompute');
          Log.write("centering");
      },
      //Attach event handlers and add text to the
      //labels. This method is only triggered on label
      //creation
      onCreateLabel: function(domElement, node){
          domElement.innerHTML = node.name;
          $jit.util.addEvent(domElement, 'click', function () {
              ht.onClick(node.id, {
                  onComplete: function() {
                      ht.controller.onComplete();
                  }
              });
          });
      },
      //Change node styles when labels are placed
      //or moved.
      onPlaceLabel: function(domElement, node){
          var style = domElement.style;
          style.display = '';
          style.cursor = 'pointer';
          if (node._depth <= 1) {
              //style.fontSize = "0.8em";
			  //style.paddingTop = '7px'; 
              //style.color = "#444";
			if (node._depth == 0){ style.fontSize = "1.5em";style.width = '190px';}
			if (node._depth == 1) { 
				style.fontSize = "1.1em";
				var top = parseInt(style.top);
				style.top = (top - 5 ) + 'px';
				
				style.width = '90px';
				if (node.name.length >= 25){style.top = (top - 15 ) + 'px';}
			}
			  
			  style.color = "#FFFFFF";

          } else if(node._depth == 2){
              style.fontSize = "0.7em";
              style.color = "#555";

          } else {
              style.display = 'none';
          }

          var left = parseInt(style.left);
          var w = domElement.offsetWidth;
          style.left = (left - w / 2) + 'px';
		  
      },
      
      onComplete: function(){
          Log.write("done");
          //Build the right column relations list.
          //This is done by collecting the information (stored in the data property) 
          //for all the nodes adjacent to the centered node.
          var node = ht.graph.getClosestNodeToOrigin("current");
          var html = "<b>" + node.name + "</b><b>Connections:</b><br/>";
          html += "<select id='connection_dropdown', style='width: 170px;'>";
          node.eachAdjacency(function(adj){
              var child = adj.nodeTo;
              if (child.data) {
                  var rel = (child.data.parent == node.name) ? child.data.relation : node.data.relation;
                  //html += "<li>" + child.name + " " + "<div class=\"relation\">(relation: " + rel + ")</div></li>";
					html += "<option value='" + child.id + "'>" + child.name + "</option>"
              }
		  });
          html += "</select>";
		  //ataching the dropdown
          //$jit.id('inner-details').innerHTML = html;

		//  var dropdown_element = $jit.id('connection_dropdown'); 
		//  $jit.util.addEvent(dropdown_element, 'change', function(){
		//	 var myselect = $jit.id('connection_dropdown'); 
		//	 //ht.onClick(myselect.options[myselect.selectedIndex].value, {
        //     //     onComplete: function() {
        //     //         ht.controller.onComplete();
        //     //     }
        //     // });
		//	var target_id = '';
		//	var toRemove = '';
		//	var node_id = myselect.options[myselect.selectedIndex].value.toString() ;
		//	var node = ht.graph.getNode(node_id); 
		//	if (node.data.controller == "projects" ) { toRemove='p_'; target_id = node.id.replace(toRemove,'');}
		//	if (node.data.controller == "organizations" ) { toRemove='o_'; target_id = node.id.replace(toRemove,'');}
		//	if (node.data.controller == "people" ) { target_id = node.id;}
		//	json_url = '' + node.data.controller +  '/' + target_id+ '.json';
		//	$.getJSON(json_url, function(data) {
		//		ht.loadJSON(data);
		//	    ////compute positions and plot.
		//	    ht.refresh();
		//		ht.controller.onComplete();
		//	});
		// });

		  overview_html = "<p style='color: #BDBDBD;'>Description:</p>"
		  overview_html += node.data.overview;	
		  $jit.id('inner-description').innerHTML = 	overview_html;
          //load second level nodes
		  //node.eachAdjacency(function(adj){
			//var child = adj.nodeTo;
			//alert(child.id);
			//if(child._depth == 1){
			//var target_id = '';
			//var toRemove = '';
			//if (child.data.controller == "projects" ) { toRemove='p_'; target_id = child.id.replace(toRemove,'');}
			//if (child.data.controller == "organizations" ) { toRemove='o_'; target_id = child.id.replace(toRemove,'');}
			//if (child.data.controller == "people" ) { target_id = child.id;}
			//json_url = '' + child.data.controller +  '/' + target_id+ '.json';
			//alert(json_url);
			//$.getJSON(json_url, function(data) {
			//	ht.op.sum(data, {  
			//	  type: 'fade:con',  
			//	  duration: 1500  
			//	});
			//});
		   // }
		  //});
			
			
      }
    });
    //load JSON data.
    ht.loadJSON(json);
    //compute positions and plot.
    ht.refresh();
    //end
    ht.controller.onComplete();
}

</script>

<div id= "json_test">
</div>

<h3>
 
</h3>

<div id="container">

<div id="left-container">
		
        <div class="text">
        <h4>
   			
        </h4> 

            <br /><br />
        </div>

        <div id="id-list"></div>
           
</div>

<div id="center-container">
	
    <div id="infovis"></div>    
</div>

<div id="right-container">
	<div id="inner-legend">
		<br/>
		<b>Legend</b>
		<br/><br/>
		<ul>
			<li id='people-circle'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;People</li>
			<li id='organization-circle'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Organizations</li>
			<li id='project-circle'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Projects</li>
		</ul>
	</div>
	<br />
	<div id="inner-details"></div>
	<br /><br />
	<div id="inner-description"></div>

</div>

<div id="log"></div>
</div>